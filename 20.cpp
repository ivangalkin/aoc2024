#include <algorithm>
#include <array>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <numeric>
#include <optional>
#include <queue>
#include <set>
#include <sstream>
#include <tuple>
#include <vector>

#ifdef NDEBUG
#undef NDEBUG
#endif
#include <assert.h>

#define ASSERT_EQ(a, b)                                                        \
  do {                                                                         \
    __typeof__(a) _a = (a);                                                    \
    __typeof__(b) _b = (b);                                                    \
    if (_a != _b) {                                                            \
      std::cout << _a << " != " << _b << std::endl;                            \
      assert(0);                                                               \
    }                                                                          \
  } while (0)

#define myprint(arg)                                                           \
  do {                                                                         \
    std::cout << "" #arg << " = " << arg << std::endl;                         \
  } while (0)

using ll = int64_t;

namespace {

std::vector<std::string> input_real{
    "##########################################################################"
    "###################################################################",
    "#.......###...###...#.....#...#.....#...#.....#...#...#.....#.........#..."
    "###...#...###.........#.......###...#...###.........#.....#.......#",
    "#.#####.###.#.###.#.#.###.#.#.#.###.#.#.#.###.#.#.#.#.#.###.#.#######.#.#."
    "###.#.#.#.###.#######.#.#####.###.#.#.#.###.#######.#.###.#.#####.#",
    "#.#...#.....#.#...#.#.#...#.#.#...#.#.#.#...#.#.#.#.#.#.#...#.......#...#."
    "..#.#.#.#...#.....#...#...#...#...#...#...#.......#.#.#...#.#.....#",
    "#.#.#.#######.#.###.#.#.###.#.###.#.#.#.###.#.#.#.#.#.#.#.#########.######"
    "#.#.#.#.###.#####.#.#####.#.###.#########.#######.#.#.#.###.#.#####",
    "#...#.......#.#...#...#.#...#.#...#.#.#.#...#.#.#.#.#.#.#.......###.....#."
    "..#.#.#...#.#...#.#...###.#...#...#.......#...###.#.#.#.#...#.....#",
    "###########.#.###.#####.#.###.#.###.#.#.#.###.#.#.#.#.#.#######.#######.#."
    "###.#.###.#.#.#.#.###.###.###.###.#.#######.#.###.#.#.#.#.#######.#",
    "#.......#...#.....#.....#...#.#...#.#.#.#.#...#.#.#.#.#.#.......#.......#."
    "..#.#...#.#.#.#.#...#.....#...###.#.........#.....#...#...#.......#",
    "#.#####.#.#########.#######.#.###.#.#.#.#.#.###.#.#.#.#.#.#######.########"
    "#.#.###.#.#.#.#.###.#######.#####.#########################.#######",
    "#.....#.#...#.....#.#...###.#.#...#.#.#...#.#...#.#.#.#.#...#...#.......#."
    "..#.#...#.#.#.#.#...#.......#...#.#.....#.....#...#.....#...###...#",
    "#####.#.###.#.###.#.#.#.###.#.#.###.#.#####.#.###.#.#.#.###.#.#.#######.#."
    "###.#.###.#.#.#.#.###.#######.#.#.#.###.#.###.#.#.#.###.#.#####.#.#",
    "#...#.#...#...#...#.#.#...#.#.#...#.#...#...#...#...#.#.#...#.#.........#."
    "..#.#.###.#...#.#...#...#...#.#...#...#.#.###...#...###...###...#.#",
    "#.#.#.###.#####.###.#.###.#.#.###.#.###.#.#####.#####.#.#.###.############"
    "#.#.#.###.#####.###.###.#.#.#.#######.#.#.###################.###.#",
    "#.#.#...#.....#...#.#...#.#.#.....#.....#...###.....#.#.#.###............."
    "#.#.#...#...#...#...#...#.#.#.#.......#...#...###...###...#...#...#",
    "#.#.###.#####.###.#.###.#.#.###############.#######.#.#.#.###############."
    "#.#.###.###.#.###.###.###.#.#.#.###########.#.###.#.###.#.#.###.###",
    "#.#...#.#.....###.#.###.#.#.......#.....#...#...###.#...#...###...#.....#."
    "#...#...###.#...#...#.#...#...#.........#...#.#...#...#.#.#.#...###",
    "#.###.#.#.#######.#.###.#.#######.#.###.#.###.#.###.#######.###.#.#.###.#."
    "#####.#####.###.###.#.#.###############.#.###.#.#####.#.#.#.#.#####",
    "#...#...#...###...#.#...#.#...###...#...#.#...#...#.#.......#...#.#...#.#."
    "#.....#...#...#.#...#...#...............#.#...#.....#.#.#.#.#.#...#",
    "###.#######.###.###.#.###.#.#.#######.###.#.#####.#.#.#######.###.###.#.#."
    "#.#####.#.###.#.#.#######.###############.#.#######.#.#.#.#.#.#.#.#",
    "###...#...#...#...#.#...#...#.#...###.#...#.....#...#.#...###...#.#...#.#."
    "#...###.#.#...#.#.......#...#...#.....###.#...#...#.#...#.#.#...#.#",
    "#####.#.#.###.###.#.###.#####.#.#.###.#.#######.#####.#.#.#####.#.#.###.#."
    "###.###.#.#.###.#######.###.#.#.#.###.###.###.#.#.#.#####.#.#####.#",
    "#.....#.#...#.....#.....#.....#.#.#...#.....#...#.....#.#.#...#.#.#...#.#."
    "#...#...#.#...#...#.....#...#.#.#...#...#.#...#.#.#.#.....#.#...#.#",
    "#.#####.###.#############.#####.#.#.#######.#.###.#####.#.#.#.#.#.###.#.#."
    "#.###.###.###.###.#.#####.###.#.###.###.#.#.###.#.#.#.#####.#.#.#.#",
    "#.....#...#...#...#.....#.###...#.#...#.....#...#.#...#.#...#...#.....#..."
    "#...#...#...#...#.#.....#...#.#...#...#.#.#.....#.#.#.#...#.#.#...#",
    "#####.###.###.#.#.#.###.#.###.###.###.#.#######.#.#.#.#.##################"
    "###.###.###.###.#.#####.###.#.###.###.#.#.#######.#.#.#.#.#.#.#####",
    "#...#.#...###...#...#...#.....#...#...#.#...#...#.#.#.#...#..............."
    "..#...#...#.#...#...#...#...#.#...#...#...#.....#...#...#.#.#.....#",
    "#.#.#.#.#############.#########.###.###.#.#.#.###.#.#.###.#.##############"
    "#.###.###.#.#.#####.#.###.###.#.###.#######.###.#########.#.#####.#",
    "#.#.#...#...........#.........#...#...#.#.#.#...#.#.#...#...#.....#...#..."
    "#...#...#.#.#...#...#...#...#.#.#...#...#...###...........#...#...#",
    "#.#.#####.#########.#########.###.###.#.#.#.###.#.#.###.#####.###.#.#.#.#."
    "###.###.#.#.###.#.#####.###.#.#.#.###.#.#.###################.#.###",
    "#.#...###.........#...###...#...#...#.#...#.....#.#...#.#...#...#.#.#...#."
    "###...#.#.#.....#.#...#...#...#.#.#...#...#...###...#.........#.###",
    "#.###.###########.###.###.#.###.###.#.###########.###.#.#.#.###.#.#.#####."
    "#####.#.#.#######.#.#.###.#####.#.#.#######.#.###.#.#.#########.###",
    "#.#...#...#...#...#...#...#.....#...#...#...#.....#...#.#.#.#...#.#.#....."
    "#...#.#.#...#...#.#.#...#.#...#...#.......#.#...#.#...#.......#...#",
    "#.#.###.#.#.#.#.###.###.#########.#####.#.#.#.#####.###.#.#.#.###.#.#.####"
    "#.#.#.#.###.#.#.#.#.###.#.#.#.###########.#.###.#.#####.#####.###.#",
    "#.#.....#...#.#...#.###.....#...#.#...#...#.#.#...#...#.#.#.#...#.#.#.#..."
    "#.#.#.#.###...#.#.#...#.#.#.#.....#...#...#.#...#.#.....#...#...#.#",
    "#.###########.###.#.#######.#.#.#.#.#.#####.#.#.#.###.#.#.#.###.#.#.#.#.#."
    "#.#.#.#.#######.#.###.#.#.#.#####.#.#.#.###.#.###.#.#####.#.###.#.#",
    "#.#.........#.....#.....###...#.#.#.#...#...#.#.#...#.#.#.#...#.#.#.#...#."
    "#.#.#.#...#...#.#.#...#.#.#.#...#...#...#...#.#...#.......#...#...#",
    "#.#.#######.###########.#######.#.#.###.#.###.#.###.#.#.#.###.#.#.#.#####."
    "#.#.#.###.#.#.#.#.#.###.#.#.#.#.#########.###.#.#############.#####",
    "#.#.#.......#.........#...#.....#...#...#...#...###...#.#...#.#.#...#....."
    "#.#.#...#.#.#.#.#.#...#.#.#.#.#.....#...#...#.#.#...........#.....#",
    "#.#.#.#######.#######.###.#.#########.#####.###########.###.#.#.#####.####"
    "#.#.###.#.#.#.#.#.###.#.#.#.#.#####.#.#.###.#.#.#.#########.#####.#",
    "#...#.........#...###...#...#...#...#.....#.........#...#...#.#.....#.#..."
    "#.#...#.#.#.#.#.#...#.#...#...#.....#.#.#...#...#.#.......#...#...#",
    "###############.#.#####.#####.#.#.#.#####.#########.#.###.###.#####.#.#.#."
    "#.###.#.#.#.#.#.###.#.#########.#####.#.#.#######.#.#####.###.#.###",
    "#...........#...#.#.....#...#.#...#.....#...#...#...#...#...#.#.....#...#."
    "#...#.#.#.#.#.#.###...###...###.....#.#.#.#.....#...#...#...#.#...#",
    "#.#########.#.###.#.#####.#.#.#########.###.#.#.#.#####.###.#.#.#########."
    "###.#.#.#.#.#.#.#########.#.#######.#.#.#.#.###.#####.#.###.#.###.#",
    "#...#.....#.#...#...#...#.#...#.........###...#...###...#...#.#.#........."
    "#...#...#...#.#.....#.....#.......#...#...#...#.#.....#.#...#.#...#",
    "###.#.###.#.###.#####.#.#.#####.#####################.###.###.#.#.########"
    "#.###########.#####.#.###########.###########.#.#.#####.#.###.#.###",
    "###...#...#...#.....#.#.#...#...#...#...#...#...#...#...#...#...#.#...#..."
    "#.........#...#.....#.......#...#.............#.#.....#.#...#.#.###",
    "#######.#####.#####.#.#.###.#.###.#.#.#.#.#.#.#.#.#.###.###.#####.#.#.#.#."
    "#########.#.###.###########.#.#.###############.#####.#.###.#.#.###",
    "#.......#...#.......#.#.#...#.....#...#...#...#.#.#.###.....#...#...#.#.#."
    "#...#...#.#...#...#########...#.............###.......#.....#.#...#",
    "#.#######.#.#########.#.#.#####################.#.#.#########.#.#####.#.#."
    "#.#.#.#.#.###.###.#########################.#################.###.#",
    "#.#...#...#...#.......#...#...#.................#.#.#.........#...#...#.#."
    "#.#.#.#.#...#...#.###################.......#...#...........#.....#",
    "#.#.#.#.#####.#.###########.#.#.#################.#.#.###########.#.###.#."
    "#.#.#.#.###.###.#.###################.#######.#.#.#########.#######",
    "#.#.#...#...#...#...#...#...#...#...#...###.......#...#.....#...#.#...#.#."
    "#.#.#.#.#...#...#.###################...#.....#...#.........#.....#",
    "#.#.#####.#.#####.#.#.#.#.#######.#.#.#.###.###########.###.#.#.#.###.#.#."
    "#.#.#.#.#.###.###.#####################.#.#########.#########.###.#",
    "#...###...#.....#.#...#...#.......#...#...#.#...........###...#...#...#.#."
    "#.#...#.#.###...#.#####################...#########.......#...#...#",
    "#######.#######.#.#########.#############.#.#.#####################.###.#."
    "#.#####.#.#####.#.#######################################.#.###.###",
    "###...#.....#...#.......#...#...###.....#...#...#...........#...###...#.#."
    "#.#...#...#.....#.###...###E###########################S..#...#...#",
    "###.#.#####.#.#########.#.###.#.###.###.#######.#.#########.#.#.#####.#.#."
    "#.#.#.#####.#####.###.#.###.#################################.###.#",
    "#...#...#...#...###...#...#...#...#...#...#...#...#.......#...#...#...#.#."
    "#...#.....#.......#...#.....#######...###...###.......###...#.#...#",
    "#.#####.#.#####.###.#.#####.#####.###.###.#.#.#####.#####.#######.#.###.#."
    "#########.#########.###############.#.###.#.###.#####.###.#.#.#.###",
    "#.....#.#.....#...#.#...###.#...#.....###.#.#.#...#...#...#.......#...#.#."
    "..#...#...###...#...#...#...#####...#.....#...#...#...#...#...#...#",
    "#####.#.#####.###.#.###.###.#.#.#########.#.#.#.#.###.#.###.#########.#.##"
    "#.#.#.#.#####.#.#.###.#.#.#.#####.###########.###.#.###.#########.#",
    "###...#.......#...#.#...#...#.#.#.......#.#.#.#.#.#...#...#.......###.#..."
    "#.#.#.#.###...#...#...#.#.#.#.....#...#.......#...#.....#.......#.#",
    "###.###########.###.#.###.###.#.#.#####.#.#.#.#.#.#.#####.#######.###.###."
    "#.#.#.#.###.#######.###.#.#.#.#####.#.#.#######.#########.#####.#.#",
    "#...#.....#...#.....#...#.....#...#.....#.#.#...#...#...#.#.......#...#..."
    "#...#.#.#...#.....#.#...#.#...#.....#.#.....###.#.........#...#...#",
    "#.###.###.#.#.#########.###########.#####.#.#########.#.#.#.#######.###.##"
    "#####.#.#.###.###.#.#.###.#####.#####.#####.###.#.#########.#.#####",
    "#...#.###...#.........#.#...#.......#...#.#...#.....#.#.#.#.......#...#.#."
    "..###...#.....###.#.#.....#.....#...#.....#.....#.#...###...#.....#",
    "###.#.###############.#.#.#.#.#######.#.#.###.#.###.#.#.#.#######.###.#.#."
    "#.###############.#.#######.#####.#.#####.#######.#.#.###.#######.#",
    "#...#.#...............#.#.#.#.......#.#.#.....#...#...#.#.#.......###...#."
    "#...###.........#.#.#.....#.......#...#...#.....#...#.....#.......#",
    "#.###.#.###############.#.#.#######.#.#.#########.#####.#.#.#############."
    "###.###.#######.#.#.#.###.###########.#.###.###.###########.#######",
    "#.....#...........#...#...#...#...#...#...#.......#.....#...###...###...#."
    "..#.....#...#...#...#...#...#.....#...#.#...###.#.........#.......#",
    "#################.#.#.#######.#.#.#######.#.#######.###########.#.###.#.##"
    "#.#######.#.#.#########.###.#.###.#.###.#.#####.#.#######.#######.#",
    "#.........#.......#.#.#.....#...#.........#.......#.............#...#.#.##"
    "#.....#...#...#####...#...#.#...#.#...#.#...#...#.....###.#.......#",
    "#.#######.#.#######.#.#.###.#####################.#################.#.#.##"
    "#####.#.###########.#.###.#.###.#.###.#.###.#.#######.###.#.#######",
    "#.....#...#.........#.#...#...#.............###...#...#.....#...#...#.#..."
    "#.....#.....#...#...#.....#.....#.#...#.#...#...#.....#...#...#...#",
    "#####.#.#############.###.###.#.###########.###.###.#.#.###.#.#.#.###.###."
    "#.#########.#.#.#.###############.#.###.#.#####.#.#####.#####.#.#.#",
    "###...#...............#...###...#...........#...#...#.#...#.#.#.#.#...#..."
    "#.....#...#...#.#.........#.....#.#...#.#.#.....#.....#.....#...#.#",
    "###.###################.#########.###########.###.###.###.#.#.#.#.#.###.##"
    "#####.#.#.#####.#########.#.###.#.###.#.#.#.#########.#####.#####.#",
    "#...#.................#.#.......#...###...###.#...###...#.#...#.#.#...#.#."
    "..#...#.#.......#...#...#...#...#.....#.#.#.....#...#.....#.#...#.#",
    "#.###.###############.#.#.#####.###.###.#.###.#.#######.#.#####.#.###.#.#."
    "#.#.###.#########.#.#.#.#####.#########.#.#####.#.#.#####.#.#.#.#.#",
    "#.#...###...........#...#...#...###.....#.....#...#...#...#...#...#...#..."
    "#.#...#...###...#.#...#.....#.....#...#.#.....#.#.#.#.....#.#.#.#.#",
    "#.#.#####.#########.#######.#.###################.#.#.#####.#.#####.######"
    "#.###.###.###.#.#.#########.#####.#.#.#.#####.#.#.#.#.#####.#.#.#.#",
    "#.#.#...#...#.....#...#.....#...###.........#...#...#.#...#.#...###......."
    "#.###...#.#...#.#.#...#...#.#.....#.#.#.......#...#...#...#...#.#.#",
    "#.#.#.#.###.#.###.###.#.#######.###.#######.#.#.#####.#.#.#.###.#########."
    "#.#####.#.#.###.#.#.#.#.#.#.#.#####.#.#################.#.#####.#.#",
    "#...#.#.###...###...#.#.......#...#.......#.#.#.......#.#...#...#........."
    "#...#...#...#...#...#...#.#.#.......#...#...###.........#.....#...#",
    "#####.#.###########.#.#######.###.#######.#.#.#########.#####.###.########"
    "###.#.#######.###########.#.###########.#.#.###.#############.#####",
    "###...#.#.....#...#.#.###...#...#.#.......#...###...#...#...#...#........."
    "..#.#...#.....###.....#...#...#.........#.#.....#.............#...#",
    "###.###.#.###.#.#.#.#.###.#.###.#.#.#############.#.#.###.#.###.##########"
    "#.#.###.#.#######.###.#.#####.#.#########.#######.#############.#.#",
    "#...#...#...#...#.#.#.#...#.....#...#...#...###...#...#...#...#.#...#....."
    "..#.#...#.......#...#.#.....#.#.......###.#.....#.............#.#.#",
    "#.###.#####.#####.#.#.#.#############.#.#.#.###.#######.#####.#.#.#.#.####"
    "###.#.#########.###.#.#####.#.#######.###.#.###.#############.#.#.#",
    "#...#.....#.#...#.#.#.#.#...#...#.....#...#...#...#.....#...#...#.#.#....."
    "..#.#...#.......#...#...#...#.........#...#...#...............#.#.#",
    "###.#####.#.#.#.#.#.#.#.#.#.#.#.#.###########.###.#.#####.#.#####.#.######"
    "#.#.###.#.#######.#####.#.#############.#####.#################.#.#",
    "###...#...#...#.#...#...#.#...#...#...........#...#.....#.#...#...#.#...#."
    "..#.....#.###...#.....#.#...#...###.....#...#.###...###.....#...#.#",
    "#####.#.#######.#########.#########.###########.#######.#.###.#.###.#.#.#."
    "#########.###.#.#####.#.###.#.#.###.#####.#.#.###.#.###.###.#.###.#",
    "#.....#.........#...#...#.#.......#.............#...#...#.#...#...#.#.#.#."
    "......#...#...#...#...#...#...#.....#...#.#.#.....#...#...#.#...#.#",
    "#.###############.#.#.#.#.#.#####.###############.#.#.###.#.#####.#.#.#.##"
    "#####.#.###.#####.#.#####.###########.#.#.#.#########.###.#.###.#.#",
    "#.#...#.........#.#...#...#.....#.#...............#...###.#.#.....#.#.#.#."
    "......#...#.#.....#.....#...#.....#...#...#...........###.#...#.#.#",
    "#.#.#.#.#######.#.#############.#.#.#####################.#.#.#####.#.#.#."
    "#########.#.#.#########.###.#.###.#.#####################.###.#.#.#",
    "#.#.#...#.......#.#.............#...#.....#...###.....#...#.#.....#.#.#.#."
    "....#.....#.#.#...#...#...#.#...#.#...............#.......#...#.#.#",
    "#.#.#####.#######.#.#################.###.#.#.###.###.#.###.#####.#.#.#.##"
    "###.#.#####.#.#.#.#.#.###.#.###.#.###############.#.#######.###.#.#",
    "#...#...#.....#...#...................#...#.#...#.#...#...#...###.#.#.#.#."
    "....#...#...#.#.#.#.#.###.#.....#.................#.#.....#.....#.#",
    "#####.#.#####.#.#######################.###.###.#.#.#####.###.###.#.#.#.#."
    "#######.#.###.#.#.#.#.###.#########################.#.###.#######.#",
    "#.....#.......#.#.....###...#...........###...#.#.#.....#.#...#...#.#.#.#."
    "....#...#...#.#.#.#.#...#...........................#...#...#...#.#",
    "#.#############.#.###.###.#.#.###############.#.#.#####.#.#.###.###.#.#.##"
    "###.#.#####.#.#.#.#.###.###############################.###.#.#.#.#",
    "#...............#...#.....#...#.....#...#...#.#.#...#...#.#.###...#.#.#.#."
    "..#.#.#####.#.#.#.#.#...###...#...............#.........###.#.#.#.#",
    "###################.###########.###.#.#.#.#.#.#.###.#.###.#.#####.#.#.#.#."
    "#.#.#.#####.#.#.#.#.#.#####.#.#.#############.#.###########.#.#.#.#",
    "#...#.......#.......#...........#...#.#.#.#.#.#...#.#.#...#...#...#.#.#.#."
    "#...#...#...#.#.#.#.#...#...#.#.............#.#...#...#...#...#.#.#",
    "#.#.#.#####.#.#######.###########.###.#.#.#.#.###.#.#.#.#####.#.###.#.#.#."
    "#######.#.###.#.#.#.###.#.###.#############.#.###.#.#.#.#.#####.#.#",
    "#.#.#...#...#.........#...........#...#...#.#...#.#.#.#.....#...###.#.#.#."
    "......#.#.#...#.#.#.#...#.#...#.....#.....#.#...#...#...#...###.#.#",
    "#.#.###.#.#############.###########.#######.###.#.#.#.#####.#######.#.#.##"
    "#####.#.#.#.###.#.#.#.###.#.###.###.#.###.#.###.###########.###.#.#",
    "#.#.....#.###...###...#...#.....#...###.....#...#.#.#...#...#.......#.#..."
    "#...#.#.#.#...#.#.#.#.....#.#...###...###...###...#...#...#...#...#",
    "#.#######.###.#.###.#.###.#.###.#.#####.#####.###.#.###.#.###.#######.###."
    "#.#.#.#.#.###.#.#.#.#######.#.###################.#.#.#.#.###.#####",
    "#.#.....#.....#.....#.....#.#...#.....#.....#.#...#...#.#.#...#.....#...#."
    "#.#.#.#...###.#.#.#.#.......#...#.........#...#...#.#.#.#...#...###",
    "#.#.###.###################.#.#######.#####.#.#.#####.#.#.#.###.###.###.#."
    "#.#.#.#######.#.#.#.#.#########.#.#######.#.#.#.###.#.#.###.###.###",
    "#.#.###.#...#.....#...#...#.#...#...#.....#.#.#...#...#.#.#...#...#.#...#."
    "..#.#.......#...#.#.#.......#...#.#.......#.#.#...#.#.#.###...#...#",
    "#.#.###.#.#.#.###.#.#.#.#.#.###.#.#.#####.#.#.###.#.###.#.###.###.#.#.####"
    "###.#######.#####.#.#######.#.###.#.#######.#.###.#.#.#.#####.###.#",
    "#.#.#...#.#.#.###.#.#.#.#.#.#...#.#.#.....#...#...#...#.#.#...#...#.#.#..."
    "....#.....#...###.#.#.......#.....#.......#.#...#.#.#.#...###...#.#",
    "#.#.#.###.#.#.###.#.#.#.#.#.#.###.#.#.#########.#####.#.#.#.###.###.#.#.##"
    "#####.###.###.###.#.#.###################.#.###.#.#.#.###.#####.#.#",
    "#.#.#.....#.#.#...#.#.#.#.#.#...#.#.#.....#.....#.....#...#...#.###.#.#.#."
    "....#...#.#...#...#.#...#...#...#.......#...#...#.#.#...#.....#.#.#",
    "#.#.#######.#.#.###.#.#.#.#.###.#.#.#####.#.#####.###########.#.###.#.#.#."
    "###.###.#.#.###.###.###.#.#.#.#.#.#####.#####.###.#.###.#####.#.#.#",
    "#...#.......#.#.#...#...#...#...#.#.#.....#.....#...###.......#...#.#.#..."
    "#...#...#...###...#.#...#.#.#.#...###...#.....###...###.#...#.#.#.#",
    "#####.#######.#.#.###########.###.#.#.#########.###.###.#########.#.#.####"
    "#.###.###########.#.#.###.#.#.#######.###.#############.#.#.#.#.#.#",
    "#.....#...#...#.#...#.........#...#.#.........#...#...#...#...#...#...#..."
    "#...#.........#...#.#...#.#.#.......#...#.............#.#.#.#.#...#",
    "#.#####.#.#.###.###.#.#########.###.#########.###.###.###.#.#.#.#######.#."
    "###.#########.#.###.###.#.#.#######.###.#############.#.#.#.#.#####",
    "#...#...#.#.#...#...#.........#.#...#.........###...#...#.#.#.#.#.....#.#."
    "###.#.........#...#...#.#.#.#.......###.#.........#...#.#.#.#.....#",
    "###.#.###.#.#.###.###########.#.#.###.#############.###.#.#.#.#.#.###.#.#."
    "###.#.###########.###.#.#.#.#.#########.#.#######.#.###.#.#.#####.#",
    "###.#.#...#.#...#.#...###.....#.#...#.........#.....#...#.#.#.#.#...#...#."
    "....#.....#...###...#.#.#.#.#...#.......#.......#.#...#...#...#...#",
    "###.#.#.###.###.#.#.#.###.#####.###.#########.#.#####.###.#.#.#.###.######"
    "#########.#.#.#####.#.#.#.#.###.#.#############.#.###.#######.#.###",
    "#...#.#.....###.#.#.#.#...#...#.###.#.......#.#.#...#.#...#.#.#...#...#..."
    "#...#...#...#.#...#.#.#.#.#...#.#.....#.....#...#.#...###.....#...#",
    "#.###.#########.#.#.#.#.###.#.#.###.#.#####.#.#.#.#.#.#.###.#.###.###.#.#."
    "#.#.#.#.#####.#.#.#.#.#.#.###.#.#####.#.###.#.###.#.#####.#######.#",
    "#...#...#.......#...#.#...#.#.#.#...#.....#...#...#.#.#...#.#...#...#...#."
    "#.#.#.#.#...#...#.#...#.#.###.#.....#.#...#.#.###...#...#.#.....#.#",
    "###.###.#.###########.###.#.#.#.#.#######.#########.#.###.#.###.###.#####."
    "#.#.#.#.#.#.#####.#####.#.###.#####.#.###.#.#.#######.#.#.#.###.#.#",
    "#...#...#...#...#...#...#...#.#.#...#...#.....#.....#.#...#...#.....#....."
    "#.#...#...#.#...#...###.#...#.#...#.#.#...#...#...#...#.#.#...#...#",
    "#.###.#####.#.#.#.#.###.#####.#.###.#.#.#####.#.#####.#.#####.#######.####"
    "#.#########.#.#.###.###.###.#.#.#.#.#.#.#######.#.#.###.#.###.#####",
    "#...#...###...#.#.#.#...#.....#.###.#.#.#.....#.......#...#...#.......#..."
    "#.#.........#.#...#...#...#.#.#.#...#.#.........#...#...#.#...#...#",
    "###.###.#######.#.#.#.###.#####.###.#.#.#.###############.#.###.#######.#."
    "#.#.#########.###.###.###.#.#.#.#####.###############.###.#.###.#.#",
    "###...#.#.......#.#.#...#.......#...#.#.#...............#...#...#...#...#."
    "#.#.......#...#...#...###...#.#.....#...#...#.....#...###.#.###.#.#",
    "#####.#.#.#######.#.###.#########.###.#.###############.#####.###.#.#.###."
    "#.#######.#.###.###.#########.#####.###.#.#.#.###.#.#####.#.###.#.#",
    "#.....#.#...#...#.#.#...#.........#...#...#...#...#...#.#.....#...#.#.#..."
    "#.#.......#...#.#...#.........#...#.#...#.#.#...#.#...#...#.....#.#",
    "#.#####.###.#.#.#.#.#.###.#########.#####.#.#.#.#.#.#.#.#.#####.###.#.#.##"
    "#.#.#########.#.#.###.#########.#.#.#.###.#.###.#.###.#.#########.#",
    "#.......###...#...#...###...........#####...#...#...#...#.......###...#..."
    "..#...........#...###...........#...#.....#.....#.....#...........#",
    "##########################################################################"
    "###################################################################"};

decltype(input_real) input_test{
    "###############", "#...#...#.....#", "#.#.#.#.#.###.#", "#S#...#.#.#...#",
    "#######.#.#.###", "#######.#.#...#", "#######.#.###.#", "###..E#...#...#",
    "###.#######.###", "#...###...#...#", "#.#####.#.###.#", "#.#...#.#.#...#",
    "#.#.#.#.#.#.###", "#...#...#...###", "###############",

};
//    auto &input = input_test;
auto &input = input_real;

// https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/
using namespace std;
#define INF 0x3f3f3f3f
// iPair ==> Integer Pair
typedef pair<int, int> iPair;

// To add an edge (assumes the same weight u->v and v->u, therefore not usable
// in our task)
void addEdge(vector<pair<int, int>> adj[], int u, int v, int wt) {
  adj[u].push_back(make_pair(v, wt));
  adj[v].push_back(make_pair(u, wt));
}

// Prints shortest paths from src to all other vertices
int shortestPath(int MAX, const vector<pair<int, int>> adj[], int V, int src,
                 int target) {
  // Create a priority queue to store vertices that
  // are being preprocessed. This is weird syntax in C++.
  // Refer below link for details of this syntax
  // http://geeksquiz.com/implement-min-heap-using-stl/
  priority_queue<iPair, vector<iPair>, greater<iPair>> pq;

  // Create a vector for distances and initialize all
  // distances as infinite (INF)
  vector<int> dist(V, INF);

  // Insert source itself in priority queue and initialize
  // its distance as 0.
  pq.push(make_pair(0, src));
  dist[src] = 0;

  /* Looping till priority queue becomes empty (or all
  distances are not finalized) */
  while (!pq.empty()) {
    // The first vertex in pair is the minimum distance
    // vertex, extract it from priority queue.
    // vertex label is stored in second of pair (it
    // has to be done this way to keep the vertices
    // sorted distance (distance must be first item
    // in pair)
    int u = pq.top().second;
    pq.pop();

    if (dist[u] > MAX) {
      return INF;
    }

    // Get all adjacent of u.
    for (const auto &[v, weight] : adj[u]) {
      // If there is shorted path to v through u.
      if (dist[v] > dist[u] + weight) {
        // Updating distance of v
        dist[v] = dist[u] + weight;
        pq.push(make_pair(dist[v], v));
      }
    }
  }

  // Print shortest distances stored in dist[]
  //        printf("Vertex Distance from Source\n");
  //        for (int i = 0; i < V; ++i)
  //            printf("%d \t\t %d\n", i, dist[i]);

  return dist[target];
}

constexpr std::tuple<ll, ll> DIFFs[]{{0, -1}, {1, 0}, {0, 1}, {-1, 0}};

struct Context {
  std::tuple<ll, ll> start;
  std::tuple<ll, ll> end;
} ctx;

void fill_ctx() {
  for (ll y = 0; y < input.size(); y++) {
    for (ll x = 0; x < input.at(y).size(); x++) {
      auto c = input.at(y).at(x);
      if (c == 'E') {
        ctx.end = {x, y};
      } else if (c == 'S') {
        ctx.start = {x, y};
      }
    }
  }
}
using Cheat = std::vector<std::tuple<uint8_t, uint8_t>>;

int get_shortest_path(int MAX, const Cheat &cheat) {
  const ll SIZE = input.size();
  const size_t vertex = SIZE * SIZE;
  auto *adj = new std::vector<pair<int, int>>[vertex];

  auto ID = [=](ll x, ll y) { return y * SIZE + x; };

  auto CHEAT = [=](ll x, ll y) {
    return std::binary_search(cheat.begin(), cheat.end(),
                              std::make_tuple<uint8_t, uint8_t>(x, y));
  };

  auto WALL = [=](ll x, ll y) {
    return !CHEAT(x, y) && input.at(y).at(x) == '#';
  };

  for (ll y = 0; y < SIZE; y++) {
    for (ll x = 0; x < SIZE; x++) {
      if (WALL(x, y)) {
        continue;
      }
      for (auto [dx, dy] : DIFFs) {
        auto nx = x + dx;
        auto ny = y + dy;
        if (ny < 0 || ny >= SIZE) {
          continue;
        }
        if (nx < 0 || nx >= SIZE) {
          continue;
        }

        if (!WALL(nx, ny)) {
          ll cost = 1;
          adj[ID(x, y)].push_back(std::make_pair(ID(nx, ny), cost));
        }
      }
    }
  }

  auto [sx, sy] = ctx.start;
  auto [ex, ey] = ctx.end;
  return shortestPath(MAX, adj, SIZE * SIZE, ID(sx, sy), ID(ex, ey));
}

void crop() {
  input.resize(input.size() - 1);
  input.erase(input.begin());
  for (auto &line : input) {
    line = line.substr(1, line.size() - 2);
  }
}

std::vector<Cheat> existing_cheats;

std::vector<Cheat> get_cheats(ll x, ll y, ll max_len) {
  std::vector<Cheat> result;
  std::vector<std::vector<std::tuple<ll, ll>>> queue;
  queue.push_back({{x, y}});

  auto found_result = [&](const std::vector<std::tuple<ll, ll>> &path) {
    Cheat path_points;
    for (auto point : path) {
      path_points.push_back(point);
    }
    std::sort(path_points.begin(), path_points.end());
    path_points.shrink_to_fit();

    if (!std::binary_search(existing_cheats.begin(), existing_cheats.end(),
                            path_points)) {
      existing_cheats.push_back(path_points);
      std::sort(existing_cheats.begin(), existing_cheats.end());
      result.push_back(std::move(path_points));
    }
  };

  do {
    auto path = std::move(queue.back());
    queue.pop_back();

    auto [x, y] = path.back();

    if (path.size() == max_len) {
      found_result(path);
      continue;
    }

    for (auto [dx, dy] : DIFFs) {
      auto nx = x + dx;
      auto ny = y + dy;

      if (ny < 0 || ny >= input.size()) {
        continue;
      }
      if (nx < 0 || nx >= input.size()) {
        continue;
      }
      if (input.at(ny).at(nx) != '#') {
        continue;
      }
      if (std::find(path.begin(), path.end(), std::make_tuple(nx, ny)) !=
          path.end()) {
        continue;
      }
      auto new_path = path;
      new_path.push_back({nx, ny});
      queue.push_back(std::move(new_path));
    }

  } while (!queue.empty());

  return result;
}

std::vector<Cheat> get_cheats(ll x, ll y) {
  std::vector<Cheat> cheats;
  for (ll max_len = 1; max_len <= 20; max_len++) {
    auto cheats_max_len = get_cheats(x, y, max_len);
    cheats.insert(cheats.end(), cheats_max_len.begin(), cheats_max_len.end());
  }
  return cheats;
}

} // namespace

int main() {
  int64_t result0 = 0;
  int64_t result1 = 0;

  ASSERT_EQ(input.size(), input.at(0).size());
  crop();
  fill_ctx();

  // for (auto& line : input) {
  //     std::cout << line << std::endl;
  // }

  Cheat no_cheat = {std::make_tuple<uint8_t, uint8_t>(255, 255)};
  auto original_len = get_shortest_path(INF, no_cheat);
  // auto [cheat_len, cheat_path]  = get_shortest_path(7, 0);
  myprint(original_len);

  // myprint(cheat_len);
  // myprint(cheat_path.size());

  // std::vector<std::tuple<ll,ll>> original_path_coord;
  // for (auto& id : original_path) {
  //     ll y = id / input.size();
  //     ll x = id % input.size();
  //     original_path_coord.push_back( {x,y});
  //     input.at(y).at(x) = 'o';
  // }

  // std::cout << "----" << std::endl;
  // for (auto& line : input) {
  //     std::cout << line << std::endl;
  // }

  auto EMPTY = [](ll x, ll y) {
    if (x < 0 || y < 0 || x >= input.size() || y >= input.size()) {
      return true;
    }

    return input.at(y).at(x) != '#';
  };

  for (ll y = 0; y < input.size(); y++) {
    for (ll x = 0; x < input.size(); x++) {
      auto c = input.at(y).at(x);
      if (c != '#') {
        continue;
      }
      if ((EMPTY(x - 1, y) && EMPTY(x + 1, y)) ||
          EMPTY(x, y - 1) && EMPTY(x, y + 1)) {
        Cheat cheat = {{x, y}};
        auto cheat_len = get_shortest_path(original_len - 100, cheat);
        if (original_len - cheat_len >= 100) {
          result0++;
        }
      }
    }
  }

//   for (ll y = 0; y < input.size(); y++) {
//     for (ll x = 0; x < input.size(); x++) {
//       auto c = input.at(y).at(x);
//       if (c != '#') {
//         continue;
//       }
//       auto cheats = get_cheats(x, y);
//       for (const auto &cheat : cheats) {
//         auto cheat_len = get_shortest_path(original_len - 100, cheat);
//         if (original_len - cheat_len >= 100) {
//           result1++;
//         }
//       }
//     }
//   }

  myprint(result0);
  myprint(result1);
  return 0;
}
